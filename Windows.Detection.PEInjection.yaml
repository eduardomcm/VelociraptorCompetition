name: Custom.Windows.Detection.PEInjection
description: |
  Enumerate the memory regions of each running process and return Virtual Address 
  Descriptor (VAD) nodes marked as PAGE_EXECUTE_READWRITE to find possibly 
  injected processes.
  
  Once the VAD 'RWX' ranges are mapped the nodes containing PEs are parsed with 
  the parse_pe() plugin. PEs parsed directly from memory might return inacurate 
  PE structures' results, such as missing Imports and wrong ImpHash.

  MITRE ATT&CK ID: T1055 - Process Injection
    
author: Eduardo Mattos - @eduardfir

parameters:
  - name: processRegex
    description: A regex applied to process names.
    default: .
  - name: YaraRule
    description: Yara option and the default if no other options provided.
    default: |
        rule IsPE {
           meta:
              author = "the internet"
              date = "2021-03-04"
              description = "A simple rule to find PE headers"
          strings: 
              $MZ1 = "MZ"
          condition:
             ($MZ1) and
             uint16(0) == 0x5A4D and
             uint32(uint32(0x3C)) == 0x00004550
        }
      
sources:
  - name: PEInjections
    query: |
      -- store info from running processes
      LET processes = SELECT Pid, Ppid, TokenIsElevated, Name, CommandLine, Exe,
               hash(path=Exe) as Hash,
               authenticode(filename=Exe) AS Authenticode,
               Username, Memory.WorkingSetSize AS WorkingSetSize
        FROM pslist()
        WHERE Name =~ processRegex
      
      -- merge info from running processes with VAD regions info  
      LET sus <= SELECT *, read_file(filename=str(str=Pid), accessor='process', offset=AddressStart, length=Size) as SusPidData  
                 FROM foreach(
                    row=processes,
                    query={
                        SELECT Pid, Name, Address as AddressStart, (Address + Size) as AddressEnd,
                            format(format='%x-%x', args=[Address, Address+Size]) AS VADRange, Size,
                            Protection, Ppid, CommandLine, Hash, Username, Authenticode
                        FROM vad(pid=Pid)
                        WHERE Protection = "xrw"
                    })
          
      -- use yara to find PE's loaded inside the selected vad regions     
      LET peinjected <= SELECT *
                        FROM foreach(
                            row=sus,
                            query={
                                SELECT
                                    Name,
                                    CommandLine,
                                    Pid,
                                    Hash,
                                    Authenticode,
                                    Username,
                                    VADRange,
                                    parse_pe(accessor='data', file=SusPidData) as InjectedPE
                                FROM yara(files=SusPidData, accessor='data', rules=YaraRule, key=TRUE)
                              })
       
       -- return results
       SELECT   
            Name,
            CommandLine,
            Pid,
            Hash,
            Authenticode,
            Username,
            VADRange,
            InjectedPE
       FROM peinjected
       
  - name: ParsedInjectedPE
    query: |
      -- return parse_pe rows containing the parsed data from injected PEs, in multiple columns
      SELECT 
        Name,
        Pid,
        VADRange,
        InjectedPE.FileHeader as FileHeader,
        InjectedPE.PDB as PDB,
        InjectedPE.Sections as Sections,
        InjectedPE.Resources as Resources,
        InjectedPE.VersionInformation as VersionInformation,
        InjectedPE.Imports as Imports,
        InjectedPE.Exports as Exports,
        InjectedPE.Forwards as Forwards,
        InjectedPE.ImpHash as ImpHash,
        InjectedPE.Authenticode as Authenticode,
        InjectedPE.AuthenticodeHash as AuthenticodeHash
      FROM peinjected
